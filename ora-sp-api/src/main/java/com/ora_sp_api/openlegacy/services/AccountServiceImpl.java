package com.ora_sp_api.openlegacy.services;

import org.apache.commons.lang3.StringUtils;
import com.ora_sp_sdk.openlegacy.GetAccountById;
import com.ora_sp_sdk.openlegacy.GetAccountById.AccountObj;
import java.math.BigDecimal;
import org.openlegacy.core.rpc.RpcSession;
import org.openlegacy.core.rpc.actions.RpcActions;

import org.openlegacy.core.annotations.services.*;
import org.openlegacy.core.annotations.OpenlegacyDesigntime;
import org.openlegacy.impl.services.ws.ServiceBinder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.context.ApplicationContext;
import org.openlegacy.utils.ActionUtil;

/**
 *  A service implementation which invokes OpenLegacy API, and returns a service output.
 *  The code below should be customize to perform a working scenario which goes through the relevant screens.
 *  Can be tested by invoking the test AccountServiceTest.
 *  The interface AccountService can be customized to enabling passing parameters to the service, and this class can consume the parameters within the relevant screens.
 */
@Service(name = "Account")
@OpenlegacyDesigntime(editor = "WebServiceEditor")
@Component
public class AccountServiceImpl implements AccountService {

    @Autowired
    private ApplicationContext applicationContext;


    @Autowired
    private ServiceBinder serviceBinder;

    @Override
    @ServiceMethod(name = "getAccount", entities = {
            @EntityMapping(alias="getAccountById", entity=com.ora_sp_sdk.openlegacy.GetAccountById.class)})
    @LogServiceUsage
    @BindInputs(endpoints = {
            @BindTo(endpoint = "getAccountById.accId", expression = "acountId")})
    @BindOutputs(endpoints = {
            @BindFrom(endpoint = "statusCode", expression = "getAccountById.statusCode"),
            @BindFrom(endpoint = "account", expression = "getAccountById.account")})
    public AccountOut getAccount(AccountIn accountIn) throws Exception {
        AccountOut accountOut = new AccountOut();
        /* autogenerated - sessions block start*/
        ;
        RpcSession oraSpSdkSession = applicationContext.getBean("oraSpSdkSession", RpcSession.class);
        /* autogenerated - sessions block end */
        ;

        try {
            /* autogenerated - execution block start */;
            GetAccountById getAccountById = serviceBinder.bindInputs(this, "getAccount", "getAccountById", new GetAccountById(), accountIn);
            getAccountById = oraSpSdkSession.doAction(ActionUtil.getRpcAction(GetAccountById.class), getAccountById);
            /* autogenerated - execution block end */;

            /* autogenerated - output block start */;
            accountOut = serviceBinder.bindOutput(this, "getAccount", accountOut, new String[]{"accountIn", "getAccountById"}, accountIn, getAccountById);
            /* autogenerated - output block end */;

            return accountOut;
        } finally {
            /* autogenerated - disconnect block start */
            ;
            oraSpSdkSession.disconnect();
            /* autogenerated - disconnect block end */
            ;
        }
    }

}
